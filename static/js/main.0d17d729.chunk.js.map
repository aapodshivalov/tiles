{"version":3,"sources":["components/tiles.js","App.js","index.js"],"names":["getMapArr","n","Array","fill","map","el","reducer","state","action","type","act","value","openedTiles","round","getInitialData","mode","length","Error","Tiles","initial","options","useReducer","dispatch","getColor","ind0","ind1","color","nextRound","win","isWin","isActiv","isOpen","block","isSame","res","forEach","includes","undefined","row","useMemo","col","className","id","onChange","selectBox","document","getElementById","newMode","selectedIndex","split","changeFunc","item","i","_","style","backgroundColor","outline","data-ind0","data-ind1","data-color","onClick","arr","colorAct","colorLast","Number","isInteger","newOpened","newAct","setTimeout","setActive","colors","Math","floor","random","arr2","concat","inds","set","Set","size","add","getArrInds","randArr","colorsArr","colorRow","push","getColorArrs","App","console","log","initialData","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0d17d729.chunk.js","sourcesContent":["import { useReducer, useMemo } from \"react\";\r\nimport { getInitialData } from \"../App\";\r\n\r\nconst getMapArr = (n) => {\r\n  return Array(n)\r\n    .fill(0)\r\n    .map((el) => []);\r\n};\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case \"setActiveTiles\": // active Tiles\r\n      return { ...state, act: action.value };\r\n    case \"setOpen\":\r\n      return { ...state, openedTiles: action.value };\r\n    case \"setRound\":\r\n      return { ...state, round: action.value };\r\n    case \"setMode\":\r\n      return getInitialData(action.mode);\r\n    case \"reset\":\r\n      return {\r\n        ...action.value,\r\n        openedTiles: [\r\n          ...Array(action.value.openedTiles.length)\r\n            .fill(0)\r\n            .map((el) => [])\r\n        ]\r\n      };\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nexport default function Tiles({ initial, options }) {\r\n  const [state, dispatch] = useReducer(reducer, initial);\r\n\r\n  const getColor = (ind0, ind1) => {\r\n    return state.color[ind0][ind1];\r\n  };\r\n\r\n  const nextRound = () => {\r\n    const win = isWin();\r\n    dispatch({ type: \"setRound\", value: win ? state.round : ++state.round });\r\n    dispatch({ type: \"setActiveTiles\", value: [[], []] });\r\n  };\r\n\r\n  const setActive = (arr) => {\r\n    const colorAct = getColor(arr[0], arr[1]);\r\n    const colorLast =\r\n      Number.isInteger(state.act[0][0]) &&\r\n      getColor(state.act[0][0], state.act[0][1]);\r\n\r\n    if (colorAct === colorLast) {\r\n      const newOpened = [...state.openedTiles];\r\n\r\n      newOpened[arr[0]][arr[1]] = colorAct;\r\n      newOpened[state.act[0][0]][state.act[0][1]] = colorAct;\r\n\r\n      dispatch({ type: \"setOpen\", value: newOpened });\r\n    }\r\n    const newAct = Number.isInteger(state.act[0])\r\n      ? [arr, state.act[0]]\r\n      : [arr, []];\r\n    dispatch({ type: \"setActiveTiles\", value: newAct });\r\n\r\n    if (colorAct && colorLast) {\r\n      setTimeout(nextRound, 100);\r\n    }\r\n  };\r\n\r\n  const isSame = (ind0, ind1) =>\r\n    state.act[0][0] === ind0 && state.act[0][1] === ind1;\r\n\r\n  const isActiv = (ind0, ind1) => {\r\n    // is active color\r\n    return (\r\n      (state.act[0][0] === ind0 && state.act[0][1] === ind1) ||\r\n      (state.act[1][0] === ind0 && state.act[1][1] === ind1)\r\n    );\r\n  };\r\n  const isOpen = (ind0, ind1) => {\r\n    // is open the same color\r\n    return state.openedTiles[ind0] && state.openedTiles[ind0][ind1];\r\n  };\r\n  const block = (ind0, ind1) => {\r\n    return isOpen(ind0, ind1) || isSame(ind0, ind1) || isActiv(ind0, ind1);\r\n  };\r\n\r\n  const isWin = () => {\r\n    let res = true;\r\n    state.openedTiles.forEach((el) => {\r\n      if (el.length < 2 || el.includes(undefined)) {\r\n        res = false;\r\n      }\r\n    });\r\n    return res;\r\n  };\r\n\r\n  const changeFunc = () => {\r\n    const selectBox = document.getElementById(\"selectBox\");\r\n    const selectedValue = selectBox.options[selectBox.selectedIndex].value;\r\n    const newMode = (selectedValue + \"\").split(\",\").map((el) => +el);\r\n    dispatch({\r\n      type: \"setMode\",\r\n      mode: newMode\r\n    });\r\n  };\r\n\r\n  const row = useMemo(() => getMapArr(state.mode[0]), [state.mode[0]]); // eslint-disable-line\r\n  const col = useMemo(() => getMapArr(state.mode[1]), [state.mode[1]]); // eslint-disable-line\r\n\r\n  return (\r\n    <div className=\"App center\">\r\n      <div>\r\n        <select\r\n          id=\"selectBox\"\r\n          onChange={() => {\r\n            changeFunc();\r\n          }}\r\n        >\r\n          {options.map((item, i) => (\r\n            <option value={item} key={i}>{`${item[0]} * ${item[1]}`}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <span>\r\n        {isWin() ? \"YOU WIN /\" : \"\"} ROUND: {state.round}\r\n      </span>\r\n      <table className=\"square center\">\r\n        <tbody>\r\n          {row.fill(0).map((_, ind0) => (\r\n            <tr key={ind0}>\r\n              {col.fill(0).map((_, ind1) => (\r\n                <td\r\n                  key={ind1}\r\n                  style={{\r\n                    backgroundColor:\r\n                      isActiv(ind0, ind1) || isOpen(ind0, ind1)\r\n                        ? getColor(ind0, ind1)\r\n                        : \"grey\",\r\n                    outline: isActiv(ind0, ind1) ? \"1px solid black\" : \"\"\r\n                  }}\r\n                  data-ind0={ind0}\r\n                  data-ind1={ind1}\r\n                  data-color={getColor(ind0, ind1)}\r\n                  onClick={() => {\r\n                    if (block(ind0, ind1)) {\r\n                      return false;\r\n                    }\r\n                    setActive([ind0, ind1]);\r\n                  }}\r\n                ></td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {isWin() && (\r\n        <button\r\n          onClick={() => {\r\n            const value = getInitialData(state.mode);\r\n            dispatch({\r\n              type: \"reset\",\r\n              value: value\r\n            });\r\n          }}\r\n        >\r\n          NEW GAME\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","// import logo from './logo.svg';\n// import './App.css';\n// import { useState } from \"react\";\nimport \"./styles.css\";\nimport Tiles from \"./components/tiles\";\n\nexport const getInitialData = (mode) => {\n  const getColorArrs = (mode) => {\n    const colors = [\n      \"red\",\n      \"blue\",\n      \"green\",\n      \"orange\",\n      \"pink\",\n      \"purple\",\n      \"brown\",\n      \"yellow\"\n    ];\n    const arr = Array((mode[0] * mode[1]) / 2)\n      .fill(0)\n      .map(\n        (_, i) => colors[i] || colors[Math.floor(Math.random() * colors.length)]\n      );\n    const arr2 = [].concat(arr).concat(arr);\n    const getArrInds = () => {\n      const set = new Set();\n      while (set.size < arr2.length) {\n        set.add(Math.floor(Math.random() * Math.floor(arr2.length)));\n      }\n      return [...set];\n    };\n    const inds = getArrInds(); // [1, 0, 3, 2]\n    const randArr = [];\n    arr2.forEach((_, i) => {\n      randArr[i] = arr2[inds[i]];\n    });\n    const colorsArr = [];\n    let colorRow = [];\n    randArr.forEach((item) => {\n      colorRow.push(item);\n      if (colorRow.length === mode[1]) {\n        colorsArr.push(colorRow);\n        colorRow = [];\n      }\n    });\n    return colorsArr;\n  };\n\n  const openedTiles = (mode) => [\n    ...Array(mode[0])\n      .fill(1)\n      .map((el) => [])\n  ];\n  const col = getColorArrs(mode);\n\n  return {\n    // mode: [3, 2],\n    mode,\n    // openedTiles: [[], [], []],\n    openedTiles: openedTiles(mode),\n    act: [[], []],\n    round: 1,\n    color: col\n  };\n};\n\n\nexport default function App() {\n  console.log(\"Appp\");\n  const options = [\n    [2, 2],\n    [3, 2],\n    [4, 4],\n    [6, 6],\n    [8, 8]\n  ];\n  const mode = options[0];\n  const initial = getInitialData(mode);\n  return (\n    <>\n      <Tiles initialData={getInitialData} initial={initial} options={options} />\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}